{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Api Server, Load Balancer, Auto Scaling,",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "VPC": {
      "Description": "VPC",
      "Type": "String"
    },

    "PublicSubnet": {
      "Description": "PublicSubnet",
      "Type": "String"
    },

    "PublicSubnetAvailabilityZones": {
      "Description": "PublicSubnet Availability Zones",
      "Type": "String"
    },

    "WebServerInstanceType": {
      "Description": "WebServer Server EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "WebServerCount": {
      "Description": "Number of EC2 instances to launch for the WebServer server",
      "Type": "Number",
      "Default": "1"
    },

    "OperatorEmail": {
      "Description": "Email address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."
    },

    "SSHLocation": {
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "Public": {
        "CIDR": "10.0.0.0/24"
      }
    },

    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },

    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-50842d38",
        "HVM64": "ami-08842d60",
        "HVMG2": "ami-3a329952"
      },
      "us-west-2": {
        "PV64": "ami-af86c69f",
        "HVM64": "ami-8786c6b7",
        "HVMG2": "ami-47296a77"
      },
      "us-west-1": {
        "PV64": "ami-c7a8a182",
        "HVM64": "ami-cfa8a18a",
        "HVMG2": "ami-331b1376"
      },
      "eu-west-1": {
        "PV64": "ami-aa8f28dd",
        "HVM64": "ami-748e2903",
        "HVMG2": "ami-00913777"
      },
      "ap-southeast-1": {
        "PV64": "ami-20e1c572",
        "HVM64": "ami-d6e1c584",
        "HVMG2": "ami-fabe9aa8"
      },
      "ap-northeast-1": {
        "PV64": "ami-21072820",
        "HVM64": "ami-35072834",
        "HVMG2": "ami-5dd1ff5c"
      },
      "ap-southeast-2": {
        "PV64": "ami-8b4724b1",
        "HVM64": "ami-fd4724c7",
        "HVMG2": "ami-e98ae9d3"
      },
      "sa-east-1": {
        "PV64": "ami-9d6cc680",
        "HVM64": "ami-956cc688",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-north-1": {
        "PV64": "ami-a857c591",
        "HVM64": "ami-ac57c595",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "PV64": "ami-a03503bd",
        "HVM64": "ami-b43503a9",
        "HVMG2": "ami-b03503ad"
      }
    },

    "Region2Principal": {
      "us-east-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "us-west-2": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "us-west-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "eu-west-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-southeast-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-northeast-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "ap-southeast-2": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "sa-east-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      },
      "cn-north-1": {
        "EC2Principal": "ec2.amazonaws.com.cn",
        "OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
      },
      "eu-central-1": {
        "EC2Principal": "ec2.amazonaws.com",
        "OpsWorksPrincipal": "opsworks.amazonaws.com"
      }
    },

    "Region2ARNPrefix": {
      "us-east-1": {
        "ARNPrefix": "arn:aws:"
      },
      "us-west-1": {
        "ARNPrefix": "arn:aws:"
      },
      "us-west-2": {
        "ARNPrefix": "arn:aws:"
      },
      "eu-west-1": {
        "ARNPrefix": "arn:aws:"
      },
      "ap-northeast-1": {
        "ARNPrefix": "arn:aws:"
      },
      "ap-southeast-1": {
        "ARNPrefix": "arn:aws:"
      },
      "ap-southeast-2": {
        "ARNPrefix": "arn:aws:"
      },
      "sa-east-1": {
        "ARNPrefix": "arn:aws:"
      },
      "cn-north-1": {
        "ARNPrefix": "arn:aws-cn:"
      },
      "eu-central-1": {
        "ARNPrefix": "arn:aws:"
      }
    },

    "Region2ELBAccountId": {
      "us-east-1": {
        "AccountId": "127311923021"
      },
      "us-west-1": {
        "AccountId": "027434742980"
      },
      "us-west-2": {
        "AccountId": "797873946194"
      },
      "eu-west-1": {
        "AccountId": "156460612806"
      },
      "ap-northeast-1": {
        "AccountId": "582318560864"
      },
      "ap-southeast-1": {
        "AccountId": "114774131450"
      },
      "ap-southeast-2": {
        "AccountId": "783225319266"
      },
      "sa-east-1": {
        "AccountId": "507241528517"
      },
      "cn-north-1": {
        "AccountId": "638102146993"
      },
      "eu-central-1": {
        "AccountId": "589561097549"
      }
    }
  },

  "Resources": {
    "PublicElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": "true",
        "SecurityGroups": [{
          "Ref": "PublicLoadBalancerSecurityGroup"
        }],
        "Subnets": [{
          "Ref": "PublicSubnet"
        }],
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "AccessLoggingPolicy": {
          "S3BucketName": {
            "Ref": "LogsBucket"
          },
          "S3BucketPrefix": "Logs",
          "Enabled": "true",
          "EmitInterval": "60"
        }
      },
      "DependsOn": "LogsBucketPolicy"
    },

    "PublicLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "WebServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [{
          "Ref": "PublicSubnetAvailabilityZones"
        }],
        "VPCZoneIdentifier": [{
          "Ref": "PublicSubnet"
        }],
        "LaunchConfigurationName": {
          "Ref": "WebServerLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "10",
        "DesiredCapacity": {
          "Ref": "WebServerCount"
        },
        "LoadBalancerNames": [{
          "Ref": "PublicElasticLoadBalancer"
        }],
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "NotificationTopic"
          },
          "NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [{
          "Key": "Network",
          "Value": "Public",
          "PropagateAtLaunch": "true"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT45M",
          "Count": {
            "Ref": "WebServerCount"
          }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {
            "Ref": "PublicLoadBalancerSecurityGroup"
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        }]
      }
    },

    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": {
            "Ref": "OperatorEmail"
          },
          "Protocol": "email"
        }]
      }
    },

    "LogsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },

    "LogsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "LogsBucket"
        },
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [{
            "Sid": "ELBAccessLogs20130930",
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": ["", [{
                  "Fn::FindInMap": ["Region2ARNPrefix", {
                    "Ref": "AWS::Region"
                  }, "ARNPrefix"]
                },
                "s3:::", {
                  "Ref": "LogsBucket"
                }, "/", "Logs", "/AWSLogs/", {
                  "Ref": "AWS::AccountId"
                }, "/*"
              ]]
            },
            "Principal": {
              "AWS": {
                "Fn::FindInMap": ["Region2ELBAccountId", {
                  "Ref": "AWS::Region"
                }, "AccountId"]
              }
            },
            "Action": ["s3:PutObject"]
          }]
        }
      }
    },

    "ApiServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [{
                "Fn::FindInMap": ["Region2Principal", {
                  "Ref": "AWS::Region"
                }, "EC2Principal"]
              }]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "ApiServerRolePolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:*",
                "cloudformation:*",
                "codedeploy:*",
                "ec2:*",
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreateRole",
                "iam:DeleteInstanceProfile",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:GetRole",
                "iam:PassRole",
                "iam:PutRolePolicy",
                "iam:RemoveRoleFromInstanceProfile"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiServerRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "ApiServerRole"
        }]
      }
    },

    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },

    "WebServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "install_all": ["install_cfn", "install_app", "install_logs"]
          },
          "install_cfn": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[main]\n",
                    "stack=", {
                      "Ref": "AWS::StackId"
                    }, "\n",
                    "region=", {
                      "Ref": "AWS::Region"
                    }, "\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource WebServerLaunchConfig ",
                    "         --region ", {
                      "Ref": "AWS::Region"
                    }, "\n",
                    "runas=root\n"
                  ]]
                }
              }
            },
            "services": {
              "cfn-hup": {
                "enabled": "true",
                "ensureRunning": "true",
                "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
              }
            }
          },
          "install_app": {
            "packages": {
              "yum": {
                "httpd": [],
                "nodejs": []
              }
            },
            "files": {
              "/var/www/html/index.html": {
                "content": {
                  "Fn::Join": ["\n", [
                    "<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
                  ]]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/httpd/conf.d/aptobackend.conf", "/var/www/html/index.html"]
                }
              }
            }
          },

          "install_logs": {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            },

            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file= /var/awslogs/state/agent-state\n",

                  "[/var/log/cloud-init.log]\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init-output.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init.log]\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-hup.log]\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-hup.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-wire.log]\n",
                  "file = /var/log/cfn-wire.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-wire.log\n",
                  "datetime_format = \n",

                  "[/var/log/httpd]\n",
                  "file = /var/log/httpd/*\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/httpd\n",
                  "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_create_state_directory" : {
                "command" : "mkdir -p /var/awslogs/state"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs"    : { "enabled" : "true", "ensureRunning" : "true",
                                 "files" : [ "/etc/awslogs/awslogs.conf" ] }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {
              "Ref": "WebServerInstanceType"
            }, "Arch"]
          }]
        },
        "IamInstanceProfile": {
          "Ref": "ApiServerRoleInstanceProfile"
        },
        "SecurityGroups": [{
          "Ref": "WebServerSecurityGroup"
        }],
        "InstanceType": {
          "Ref": "WebServerInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -xe\n",
              "yum update -y aws-cfn-bootstrap\n",

              "# Install the sample application\n",
              "/opt/aws/bin/cfn-init -v ",
              "    --stack ", {
                "Ref": "AWS::StackId"
              },
              "    --resource WebServerLaunchConfig ",
              "    --configsets install_all ",
              "    --region ", {
                "Ref": "AWS::Region"
              }, "\n",

              "# Signal completion\n",
              "/opt/aws/bin/cfn-signal -e $? ",
              "    --stack ", {
                "Ref": "AWS::StackId"
              },
              "    --resource WebServerAutoScalingGroup ",
              "    --region ", {
                "Ref": "AWS::Region"
              }, "\n"
            ]]
          }
        }
      }
    },

    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },

    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },

    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [{
          "Ref": "WebServerScaleUpPolicy"
        }],
        "Dimensions": [{
          "Name": "AutoScalingGroupName",
          "Value": {
            "Ref": "WebServerAutoScalingGroup"
          }
        }],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [{
          "Ref": "WebServerScaleDownPolicy"
        }],
        "Dimensions": [{
          "Name": "AutoScalingGroupName",
          "Value": {
            "Ref": "WebServerAutoScalingGroup"
          }
        }],
        "ComparisonOperator": "LessThanThreshold"
      }
    }
  },

  "Outputs": {
    "WebSite": {
      "Description": "URL of the website",
      "Value": {
        "Fn::Join": ["", ["http://", {
          "Fn::GetAtt": ["PublicElasticLoadBalancer", "DNSName"]
        }]]
      }
    },

    "ELBAccessLogsBucket": {
      "Description": "DNS name of the S3 bucket storing ELB Access Logs",
      "Value": {
        "Fn::GetAtt": ["LogsBucket", "DomainName"]
      }
    },

    "WebServerSecurityGroup": {
      "Description": "Web Server Security Group",
      "Value": {
        "Ref": "WebServerSecurityGroup"
      }
    }
  }
}